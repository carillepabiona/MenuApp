@page "/addtocart"
@inject DatabaseService DB
@inject NavigationManager Navigation
@using MenuApp.Service
@using SQLite
@using MenuApp.Models
@using System.Linq
@using System.Net.Sockets
@using System.Text

<PageTitle>Cart</PageTitle>
<head>
    <link rel="stylesheet" href="cartStyle.css">
</head>
<div class="cart-header">
    <a href="/home" class="back-to-home">
        <i class="fa-solid fa-arrow-left"></i>
    </a>
    <h3>Your Cart</h3>
</div>
@if (cartItems == null || !cartItems.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <div class="cart-items">
        @foreach (var item in cartItems)
        {
            <div class="cart-item">
                <img src="@item.Image" alt="@item.Name" class="cart-item-img" />
                <div class="cart-item-details">
                    <div class="item-header">
                        <h5>@item.Name</h5>
                        <button class="remove-btn" @onclick="() => RemoveFromCart(item.Id)">×</button>
                    </div>
                    <p>₱ @item.Price.ToString("F2")</p>
                    <div class="quantity-control">
                        <button @onclick="() => UpdateQuantity(item, item.Quantity - 1)">-</button>
                        <span>@item.Quantity</span>
                        <button @onclick="() => UpdateQuantity(item, item.Quantity + 1)">+</button>
                    </div>

                </div>
            </div>
        }
    </div>
    <div class="note-to-staff">
        <label for="staffNote">Note to Staff:</label>
        <textarea id="staffNote" @bind="noteToStaff" placeholder="Any instructions or notes..."></textarea>
    </div>
    <div class="cart-footer">
        <h4>Total: ₱ @totalPrice.ToString("F2")</h4>
        <button class="order-now-btn" @onclick="PlaceOrder">Order Now</button>
    </div>
}

@code {
    private string noteToStaff = string.Empty;
    private List<CartItem> cartItems;
    private decimal totalPrice;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        // Load cart items from the database
        cartItems = await DB.GetCartItemsAsync();

        // Calculate the total price
        totalPrice = cartItems.Sum(item => item.Price * item.Quantity);
    }

    private async Task UpdateQuantity(CartItem item, int newQuantity)
    {
        if (newQuantity < 1) return; // Prevent negative quantity

        // Update the quantity of the item in the database
        item.Quantity = newQuantity;
        await DB.UpdateCartItemAsync(item);

        // Reload cart items to reflect the changes
        await LoadCartItems();
    }

    private async Task RemoveFromCart(int itemId)
    {
        // Remove the item from the database
        await DB.RemoveCartItemAsync(itemId);

        // Reload cart items to reflect the changes
        await LoadCartItems();
    }

    private async Task PlaceOrder()
    {
        string tableNumber = "A2"; // You can make this dynamic later
        var orderItems = new List<OrderItem>();

        foreach (var item in cartItems)
        {
            var orderItem = new OrderItem
                {
                    Name = item.Name,
                    Price = item.Price,
                    Quantity = item.Quantity,
                    Status = "Pending...",
                    Image = item.Image,
                    OrderedAt = DateTime.Now,
                    TableNumber = tableNumber,
                    Note = noteToStaff // Make sure OrderItem has a Note property
                };

            await DB.AddOrderItemAsync(orderItem);
            orderItems.Add(orderItem);
        }

        // Serialize and send order to POS
        await SendOrderToPOSAsync(orderItems);

        // Clear local cart
        await DB.ClearCartAsync();
        Navigation.NavigateTo("/myorder");
    }

    private async Task SendOrderToPOSAsync(List<OrderItem> orderItems)
    {
        try
        {
            string posIp = "192.168.254.106"; // Replace with the POS tablet's local IP
            int posPort = 9000;

            using TcpClient client = new TcpClient();
            await client.ConnectAsync(posIp, posPort);

            using NetworkStream stream = client.GetStream();
            string jsonData = System.Text.Json.JsonSerializer.Serialize(orderItems);
            byte[] buffer = Encoding.UTF8.GetBytes(jsonData);
            await stream.WriteAsync(buffer, 0, buffer.Length);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to send order to POS: {ex.Message}");
        }
    }

}