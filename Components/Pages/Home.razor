@page "/home"
@using MenuApp.Models
@inject CartService CartService
@inject NavigationManager Navigation
@using System.Net;
@using System.Net.Sockets;
@using System.Text;
@using System.Threading.Tasks;
@inject IJSRuntime JSRuntime
@inject IJSRuntime JS
@using MenuApp.Service;


<head>
    <link rel="stylesheet" href="homeStyle.css">
    <script src="js/script.js"></script>
    <script src="js/jquery.cycle2.js"></script>
</head>


<SectionContent SectionName="page-buttons">
    <div class="flex-row-wrapper">
        <!-- Search Bar -->
        <div class="search-container">
            <input type="text" @bind="SearchQuery" placeholder="Search for food..." id="search-input" />
            <button class="clear-btn" @onclick="ClearSearch" style="visibility: @(string.IsNullOrEmpty(SearchQuery) ? "hidden" : "visible") ; color: black; background: white; ">×</button>
            <button @onclick="SearchItems">Search</button>
        </div>

        <!-- Cart and Chat Icons -->
        <div class="search-cart-right d-flex align-items-center gap-3">
            <div style="position: relative; cursor: pointer;" @onclick="@GoToCart">
                <i class="fa fa-shopping-cart cart-icon" style="font-size: 30px;"></i>
                @if (CartService.GetCartCount() > 0)
                {
                    <span class="cart-badge">@CartService.GetCartCount()</span>
                }
            </div>
            <button class="chat-toggle" onclick="toggleChat(event)" style="background: none; border: none;">
                <i class="fa-regular fa-comment-dots" style="font-size: 24px; color: black;"></i>
                <span id="chatBadge" class="dot" style="display: none;"></span>
            </button>
        </div>
    </div>

    <div id="toast" class="toast">Item added to cart!</div>
</SectionContent>



<div id="chatContainer" style="position: fixed; bottom: 0; right: 10px; z-index: 999;">
    <!-- Chat Box -->
    <div id="chatBox" class="sidebar" style="background-color: #FFECB3; border: 3px solid #FF6F00; width: 300px;">
        <div class="chat-header" onclick="toggleChat()" style="background-color: #FF6F00; color: white; padding: 10px; font-size: 18px;">
            Chat Box
        </div>
        <div class="chat-content" id="chatContent" style="height: 300px; width: 295px; overflow-y: auto; padding: 10px; background-color: #FFF3E0;">
            @foreach (var msg in Messages)
            {
                <div style="color: #5D4037; padding: 5px 0;">@msg</div>
            }
        </div>
        <div class="chat-input" style="padding: 5px; background-color: #FFECB3; margin: 5px;">
            <input @bind="OutgoingMessage" type="text" placeholder="Type a message..."
            style="width: 200px; padding: 10px; font-size: 16px; border: 1px solid #FF6F00; border-radius: 5px; margin: 5px;" />
            <button @onclick="SendMessageToSender"
            style="background-color: #FF6F00; color: white; padding: px; font-size: 16px; border: none; border-radius: 5px; margin-top: 5px;">
                Send
            </button>
        </div>
    </div>
</div>



<!-- Category -->
<div class="category-scroll-container">
    <span class="category-label @(SelectedCategory == "All" ? "active-category" : "")"
    @onclick="@(() => SelectCategory("All"))">All</span>

    <span class="category-label @(SelectedCategory == "Best Selling" ? "active-category" : "")"
          @onclick="@(() => SelectCategory("Best Selling"))">🔥 Best Selling</span>

    @foreach (var category in FoodCategories)
    {
        <span class="category-label @(SelectedCategory == category.Name ? "active-category" : "")"
              @onclick="@(() => SelectCategory(category.Name))">
            @category.DisplayName
        </span>
    }
</div>

<!-- Food Grid -->
<div class="food-grid">
    @foreach (var item in FilteredFoodItems)
    {
        <div class="food-card" @onclick="() => ShowDetail(item)">
            <img src="@item.Image" alt="@item.Name" class="food-img" />
            <div class="food-body">
                <p class="food-name">@item.Name</p>
                <div class="spacer"></div>
                <p class="food-price">₱ @item.Price.ToString("F2")</p>
            </div>
        </div>
    }
</div>
@if (SelectedFoodItem != null)
{
    <div class="food-detail-overlay" @onclick="HandleOverlayClick">
        <div class="popup-content" @onclick:stopPropagation>
            <!-- Close Button -->
            <button class="close-button" @onclick="CloseDetail">×</button>

            <!-- Top Section -->
            <div class="popup-top">
                <img src="@SelectedFoodItem.Image" class="popup-img" alt="@SelectedFoodItem.Name" />
                <div class="popup-info">
                    <p style="font-size:18px; font-weight:bold;">@SelectedFoodItem.Name</p>
                    <p>@SelectedFoodItem.Description</p>
                    <p class="popup-price">₱ @SelectedFoodItem.Price.ToString("F2")</p>

                </div>
            </div>
            <!-- Footer Section -->
            <div class="popup-footer">
                        <div class="quantity-container">
                            <button @onclick="DecreaseQuantity">−</button>
                            <input type="number" min="1" @bind="Quantity" class="quantity-input" />
                            <button @onclick="IncreaseQuantity">+</button>
                        </div>
                <button class="add-to-cart" @onclick="AddToCart">Add To Cart</button>
            </div>
        </div>
    </div>
}



@code {
    private string SelectedCategory = "All";
    List<BestSellingItem> TopItems = new();
    private async void SelectCategory(string category)
    {
        SelectedCategory = category;

        if (category == "All")
        {
            ShowAllItems();
        }
        else if (category == "Best Selling")
        {
          
        }
        else
        {
            FilterCategory(category);
        }

        StateHasChanged();
    }
    ///////////////////// SEARCH /////////////////////
    private string SearchQuery = string.Empty; // Store the search query

    // Method to filter items based on search query
    void SearchItems()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            // If search is empty, show all items
            FilteredFoodItems = FoodItems;
        }
        else
        {
            // Filter items based on the search query
            FilteredFoodItems = FoodItems.Where(f => f.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void ClearSearch()
    {
        SearchQuery = string.Empty;  // Clear the search input
        FilteredFoodItems = FoodItems;  // Reset the filtered items to show all
    }

    ///////////////////// CATEGORY /////////////////////  /////////////////////  /////////////////////  /////////////////////

    private List<FoodCategory> FoodCategories = FoodCategoryData.GetFoodCategories();
    private List<FoodItem> FoodItems = FoodItemData.GetFoodItems();
    private List<FoodItem> FilteredFoodItems { get; set; } = new();

    private void FilterCategory(string category)
    {
        FilteredFoodItems = FoodItems
            .Where(item => item.Category.Equals(category, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void ShowAllItems()
    {
        FilteredFoodItems = FoodItems;
    }

    private int SelectedQuantity = 1;
    private void DecreaseQuantity() => Quantity = Math.Max(1, Quantity - 1);
    private void IncreaseQuantity() => Quantity++;
    
    private void ShowDetail(FoodItem item)
    {
        SelectedFoodItem = item;
        Quantity = 1;
    }

    private int Quantity
    {
        get => _quantity;
        set => _quantity = value < 1 ? 1 : value;
    }
    private int _quantity = 1;

    private void CloseDetail()
    {
        SelectedFoodItem = null;
    }
  
    private FoodItem? SelectedFoodItem;

    [Inject] private NavigationManager Nav { get; set; }
    [Inject] private DatabaseService DB { get; set; }

    private void HandleOverlayClick()
    {
        CloseDetail();
    }

    private async Task AddToCart()
    {
        var item = new CartItem
            {
                Name = SelectedFoodItem.Name,
                Image = SelectedFoodItem.Image,
                Price = SelectedFoodItem.Price,
                Quantity = Quantity
            };

        await DB.AddCartItemAsync(item);
        CloseDetail(); // 👈 Close the popup

        await JSRuntime.InvokeVoidAsync("showToast", $"{item.Name} added to cart!"); // 👈 Show notification
        StateHasChanged();
    }
    private async Task OrderNow()
    {
        var item = new OrderItem
            {
                Name = SelectedFoodItem.Name,
                Image = SelectedFoodItem.Image,
                Price = SelectedFoodItem.Price,
                Quantity = Quantity,
                Status = "Food Preparing"
            };

        await DB.AddOrderItemAsync(item);
        Nav.NavigateTo("/myorder");
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/addtocart");
    }
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }

    ///////////////////// CHAT BOX/////////////////////  /////////////////////  /////////////////////  /////////////////////

    private TcpListener _listener;
    private const int Port = 5000;
    private List<string> Messages = new();
    private string OutgoingMessage = "";

    private const string SenderIP = "192.168.254.106"; // Update to actual sender IP
    private const int SenderPort = 5000;

    protected override async Task OnInitializedAsync()
    {
        FilteredFoodItems = FoodItems;
        await StartListening();
    }

    private async Task StartListening()
    {
        try
        {
            _listener = new TcpListener(IPAddress.Any, Port);
            _listener.Start();

            while (true)
            {
                var client = await _listener.AcceptTcpClientAsync();
                _ = HandleClient(client);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task HandleClient(TcpClient client)
    {
        try
        {
            using var stream = client.GetStream();
            byte[] buffer = new byte[1024];
            int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
            string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);

            Messages.Add($"Staff: {message}");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Client handling error: {ex.Message}");
        }
    }

    private async Task SendMessageToSender()
    {
        if (!string.IsNullOrWhiteSpace(OutgoingMessage))
        {
            try
            {
                using var client = new TcpClient();
                await client.ConnectAsync(SenderIP, SenderPort);

                using var stream = client.GetStream();
                byte[] data = Encoding.UTF8.GetBytes(OutgoingMessage);
                await stream.WriteAsync(data, 0, data.Length);

                Messages.Add($"You: {OutgoingMessage}");
                OutgoingMessage = "";
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Sending error: {ex.Message}");
            }
        }
    }

}
